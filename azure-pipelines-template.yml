parameters:
  # defaults:
  container: ''
  androidHost: ''
  androidNDK: ''

jobs:
- job: "${{ parameters.platform }}"
  timeoutInMinutes: 0

  strategy:
    matrix:

      ${{ if eq(parameters.deployRelease, 'True') }}:
        stable:
          toolchain: stable
          features: ''
          exampleArgs: ''
        stable-gl:
          toolchain: stable
          features: 'gl'
          exampleArgs: ''
        stable-vulkan:
          toolchain: stable
          features: 'vulkan'
          exampleArgs: ''
        stable-textlayout:
          toolchain: stable
          features: 'textlayout'
          exampleArgs: ''
        stable-gl-textlayout:
          toolchain: stable
          features: 'gl,textlayout'
          exampleArgs: ''
        stable-vulkan-textlayout:
          toolchain: stable
          features: 'vulkan,textlayout'
          exampleArgs: ''
        stable-all-features:
          toolchain: stable
          features: 'gl,vulkan,textlayout'
          exampleArgs: ''
        ${{ if eq(parameters.platform, 'Linux') }}:
          stable-gl-x11:
            toolchain: stable
            features: 'gl,x11'
            exampleArgs: ''
          stable-gl-textlayout-x11:
            toolchain: stable
            features: 'gl,textlayout,x11'
            exampleArgs: ''
        ${{ if eq(parameters.platform, 'Windows') }}:
          stable-d3d:
            toolchain: stable
            features: 'd3d'
            exampleArgs: ''
          stable-d3d-textlayout:
            toolchain: stable
            features: 'd3d,textlayout'
            exampleArgs: ''
      ${{ if eq(parameters.deployRelease, 'False') }}:
        stable-all-features:
          toolchain: stable
          features: 'gl,vulkan,textlayout,webp'
          exampleArgs: '--driver cpu --driver pdf --driver svg'
        stable-all-features-debug:
          toolchain: stable
          features: 'gl,vulkan,textlayout,webp'
          exampleArgs: ''
          skia_debug: '1'
        beta-all-features:
          toolchain: beta
          features: 'gl,vulkan,textlayout,webp'
          exampleArgs: ''

  variables:
    platform: ${{ parameters.platform }}
    platformTarget: ${{ parameters.platformTarget }}
    vmImage: ${{ parameters.vmImage }}
    androidHost: ${{ parameters.androidHost }}
    androidNDK: ${{ parameters.androidNDK }}
    androidAPILevel: ${{ parameters.androidAPILevel }}
    androidBinExt: ${{ parameters.androidBinExt }}
    rust_backtrace: 1

  pool:
    vmImage: $(vmImage)

  ${{ if ne(parameters.container, '') }}:
    container: ${{ parameters.container }}

  steps:
  - ${{ if eq(parameters.platform, 'macOS') }}:
    # Uninstall LLVM to prevent conflicts with Apple's clang. 
    - bash: |
        brew uninstall llvm
      displayName: 'Uninstall LLVM'
  
  # Install Rust for the user if we are running inside a container on Linux
  - ${{ if and(ne(parameters.container, ''), eq(parameters.platform, 'Linux')) }}:
    - bash: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"
      displayName: Install Rust (Container only)

  # All platforms (Linux images have Rust preinstalled and in the PATH).
  # Note that self updates do not seem to work for some targets, so we disable them for now.
  - bash: |
      set -e
      rustup default ${TOOLCHAIN}
      rustup update --no-self-update ${TOOLCHAIN}
      rustup component add clippy --toolchain ${TOOLCHAIN}
      rustup component add rustfmt --toolchain ${TOOLCHAIN}
      rustc -Vv
      cargo -V
    displayName: Update Rust, Install Clippy and Rustfmt and print Rust & Cargo Versions

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        clang --version
      displayName: LLVM/Clang Version

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        "C:/Program Files/LLVM/bin/clang.exe" --version
      displayName: LLVM/Clang Version

  - ${{ if ne(parameters.androidHost, '') }}:
    # Android NDK
    - bash: |
        set -e
        (cd ${HOME} && curl -sSf -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-$(androidNDK)-$(androidHost).zip)
        (cd ${HOME} && unzip android-ndk.zip)
        echo "##vso[task.setvariable variable=ANDROID_NDK;]${HOME}/android-ndk-$(androidNDK)"
        echo "##vso[task.setvariable variable=PATH;]${PATH}:${HOME}/android-ndk-$(androidNDK)/toolchains/llvm/prebuilt/$(androidHost)/bin"
      displayName: 'Install Android NDK $(androidNDK)'

  # Note: support to ignore specific rust files and directories is unstable yet: https://github.com/rust-lang/rustfmt/pull/2522
  - bash: |
      set -e
      echo "// WAITING FOR RUSTFMT.TOML TO SUPPORT IGNORING FILES" >skia-bindings/src/bindings.rs
      cargo fmt -- --check
      rm skia-bindings/src/bindings.rs
    displayName: Check Rust formatting

  - template: 'azure-pipelines-build-target.yml'
    parameters:
      target: '$(platformTarget)'
      exampleArgs: '$(exampleArgs)'
      runClippy: true
      runTests: true
      generateArtifacts: true
      releaseBinaries: ${{ parameters.deployRelease }}
      ${{ if and(eq(parameters.platform, 'macOS'), eq(parameters.deployRelease, 'False')) }}:
        features: '$(features),metal'
      ${{ if and(eq(parameters.platform, 'Windows'), eq(parameters.deployRelease, 'False')) }}:
        features: '$(features),d3d'
      ${{ if and(eq(parameters.platform, 'Linux'), eq(parameters.deployRelease, 'False')) }}:
        features: '$(features),egl,x11,wayland'

  - ${{ if eq(parameters.platform, 'macOS') }}:
    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-linux-android'
        androidEnv: true
        releaseBinaries: ${{ parameters.deployRelease }}

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'
        androidEnv: true
        releaseBinaries: ${{ parameters.deployRelease }}

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'i686-linux-android'
        androidEnv: true

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-apple-ios'
        releaseBinaries: ${{ parameters.deployRelease }}
        ${{ if and(eq(parameters.platform, 'macOS'), eq(parameters.deployRelease, 'False')) }}:
          features: '$(features),metal'

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-apple-ios'
        releaseBinaries: ${{ parameters.deployRelease }}
        ${{ if and(eq(parameters.platform, 'macOS'), eq(parameters.deployRelease, 'False')) }}:
          features: '$(features),metal'

  - ${{ if eq(parameters.platform, 'Linux') }}:
    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-linux-android'
        androidEnv: true

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'
        androidEnv: true

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'i686-linux-android'
        androidEnv: true

# TODO: Windows Android builds are temporarily disabled, because of:
#       error occurred:
#         Failed to find tool. Is `aarch64-linux-android26-clang.cmd` installed?
#       >> works locally on msys2, probably a PATH problem with AZURE?, although PATH variable looks fine.
#  - ${{ if eq(parameters.platform, 'Windows') }}:
#    - template: 'azure-pipelines-build-target.yml'
#      parameters:
#        target: 'aarch64-linux-android'
#        androidEnv: true
#    - template: 'azure-pipelines-build-target.yml'
#      parameters:
#        target: 'x86_64-linux-android'
#        androidEnv: true
